@startuml
top to bottom direction

package pkg.logger {
    package formatter {
        interface Interface {
            + Template() : string
            + Format(message : string, loggerName : string, level : loglevel.LogLevel, colored : bool) : string
        }

        struct Formatter implements Interface {
            ~ template : string
            + IsEqual(anotherFormatter : *Formatter) : bool
            + EvaluatePreset(message : string, loggerName : string, level : loglevel.LogLevel) : map[string]string
            + Template() : string
            + Format(message : string, loggerName : string, level : loglevel.LogLevel, colored : bool) : string
        }

        class "<<module>>" {
            ~ logLevelColors : map[loglevel.LogLevel]string
            ~ resetColor : string
            + New(template : string) : *Formatter
        }

        "<<module>>" ..> Formatter : uses
    }
    package handler {
        interface Interface {
            + Writer() : io.Writer
            + FromLevel() loglevel.LogLevel
            + SetFromLevel(fromLevel loglevel.LogLevel)
            + ToLevel() loglevel.LogLevel
            + SetToLevel(toLevel loglevel.LogLevel)
            + Formatter() : formatter.Interface
            + Write(logName : string, level : loglevel.LogLevel, message : string, parameters : ...any)
        }
        struct Handler implements Interface {
            ~ fromLevel : loglevel.LogLevel
            ~ toLevel : loglevel.LogLevel
            ~ formatter : formatter.Interface
            ~ writer : io.Writer
            ~ consoleSupportsANSIColors : func() bool
            + Writer() : io.Writer
            + FromLevel() : loglevel.LogLevel
            + SetLevel(level : loglevel.LogLevel)
            + ToLevel() : loglevel.LogLevel
            + SetToLevel(level : loglevel.LogLevel)
            + Formatter() : formatter.Interface
            + Write(logName : string, level : loglevel.LogLevel, message : string, parameters : ...any)
        }
        class "<<module>>" {
            ~ osOpenFile : os.OpenFile(name : string, flag : int, perm : FileMode) : (*File, error)
            ~ osStdout : *File
            ~ osStderr : *File
            + New(fromLevel : loglevel.LogLevel, toLevel : loglevel.LogLevel, newFormatter : formatter.Interface, writer : io.Writer, errorWriter : io.Writer) : *Handler
            + NewConsoleHandler(fromLevel : loglevel.LogLevel, toLevel : loglevel.LogLevel, newFormatter : formatter.Interface) : *Handler
            + NewConsoleErrorHandler(fromLevel : loglevel.LogLevel, toLevel : loglevel.LogLevel, newFormatter : formatter.Interface) : *Handler
            + NewFileHandler(fromLevel : loglevel.LogLevel, toLevel : loglevel.LogLevel, newFormatter : formatter.Interface, file : string) : *Handler
            ~ consoleSupportsANSIColors() : bool
        }

        "<<module>>" ..> Handler : uses
    }
    package loglevel {
        stereotype LogLevel <<int>> {
            + String() : string
            + DigitRepresentation() : int
            + Next() : LogLevel
            + Previous() : LogLevel
        }
        class "<<module>>" {
            + All : loglevel.LogLevel
            + Trace : loglevel.LogLevel
            + Debug : loglevel.LogLevel
            + Verbose : loglevel.LogLevel
            + Info : loglevel.LogLevel
            + Notice : loglevel.LogLevel
            + Warning : loglevel.LogLevel
            + Severe : loglevel.LogLevel
            + Error : loglevel.LogLevel
            + Alert : loglevel.LogLevel
            + Critical : loglevel.LogLevel
            + Emergency : loglevel.LogLevel
            + Null : loglevel.LogLevel
        }
        "<<module>>" ..> LogLevel : uses
    }
    interface baseLoggerInterface {
        + Log(level : loglevel.LogLevel, message : string, parameters : ...any)
        + Name() : string
        + SetName(name : string)
        + Handlers() : []handler.Interface
        + AddHandler(handlerInterface : handler.Interface)
        + RemoveHandler(handlerInterface : handler.Interface)
    }
    struct baseLogger implements baseLoggerInterface {
        ~ name : string
        ~ handlers : []handler.Interface
        + Log(level : loglevel.LogLevel, message : string, parameters : ...any)
        + Name() : string
        + SetName(name : string)
        + Handlers() : []handler.Interface
        + AddHandler(handlerInterface : handler.Interface)
        + RemoveHandler(handlerInterface : handler.Interface)
    }
    interface Interface {
        + Name() : string
        + Handlers() : []handler.Interface
        + AddHandler(handlerInterface : handler.Interface)
        + RemoveHandler(handlerInterface : handler.Interface)
        + Trace(message : string, parameters : ...any)
        + Debug(message : string, parameters : ...any)
        + Verbose(message : string, parameters : ...any)
        + Info(message : string, parameters : ...any)
        + Notice(message : string, parameters : ...any)
        + Warning(message : string, parameters : ...any)
        + Severe(message : string, parameters : ...any)
        + Error(message : string, parameters : ...any)
        + Alert(message : string, parameters : ...any)
        + Critical(message : string, parameters : ...any)
        + Emergency(message : string, parameters : ...any)
    }
    struct Logger implements Interface {
        ~ baseLogger : baseLoggerInterface
        + Name() : string
        + Handlers() : []handler.Interface
        + AddHandler(handlerInterface : handler.Interface)
        + RemoveHandler(handlerInterface : handler.Interface)
        + Trace(message : string, parameters : ...any)
        + Debug(message : string, parameters : ...any)
        + Verbose(message : string, parameters : ...any)
        + Info(message : string, parameters : ...any)
        + Notice(message : string, parameters : ...any)
        + Warning(message : string, parameters : ...any)
        + Severe(message : string, parameters : ...any)
        + Error(message : string, parameters : ...any)
        + Alert(message : string, parameters : ...any)
        + Critical(message : string, parameters : ...any)
        + Emergency(message : string, parameters : ...any)
    }
    struct Configuration {
        ~ fromLevel : loglevel.LogLevel
        ~ toLevel : loglevel.LogLevel
        ~ template : string
        ~ file : string
        ~ name : string
    }
    stereotype Option <<func(*Configuration)>> {}
    class "<<module>>" {
        ~ rootLogger : *Logger
        ~ fromLevel : loglevel.LogLevel
        ~ toLevel : loglevel.LogLevel
        ~ template : string
        ~ init()
        + New(name : string) : *Logger
        + WithFromLevel(fromLevel : loglevel.LogLevel) : Option
        + WithToLevel(toLevel : loglevel.LogLevel) : Option
        + WithTemplate(template : string) : Option
        + WithFile(file : string) : Option
        + WithName(name : string) : Option
        + NewConfiguration(options : ...Option) : *Configuration
        + Configure(configuration : *Configuration)
        + Name() : string
        + Template() : string
        + FromLevel() : loglevel.LogLevel
        + ToLevel() : loglevel.LogLevel
        + Trace(message : string, parameters : ...any)
        + Debug(message : string, parameters : ...any)
        + Verbose(message : string, parameters : ...any)
        + Info(message : string, parameters : ...any)
        + Notice(message : string, parameters : ...any)
        + Warning(message : string, parameters : ...any)
        + Severe(message : string, parameters : ...any)
        + Error(message : string, parameters : ...any)
        + Alert(message : string, parameters : ...any)
        + Critical(message : string, parameters : ...any)
        + Emergency(message : string, parameters : ...any)
    }

    Logger *-- baseLoggerInterface
    "<<module>>" ..> Logger : uses
    "<<module>>" ..> Option : uses
    "<<module>>" ..> Configuration : uses
    Option ..> Configuration : uses
}

pkg.logger.handler.Handler *-- pkg.logger.loglevel.LogLevel : contains
pkg.logger.handler.Handler *-- pkg.logger.formatter.Interface : contains
pkg.logger.baseLogger *-- "0..*" pkg.logger.handler.Interface : contains


@enduml